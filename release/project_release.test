<?php
// $Id$

/**
 * @file
 * Provide test of functionality.
 *
 * @author Jimmy Berry ("boombatower", http://drupal.org/user/214218)
 */

module_load_include('test', 'pift');

/**
 * Base project_release_info test case.
 */
class ProjectInfoTestCase extends PIFTTestCase {

  /**
   * Assert that a component has the proper values.
   *
   * @param $component
   *   Component information to check.
   * @param $component_id
   *   Component ID.
   * @param $rid
   *   Project release ID of which the component is apart.
   * @param $project
   *   Project name of which the component is apart.
   */
  protected function assertComponent(array $component, $component_id, $rid, $project) {
    $this->assertEqual($component['component_id'], $component_id, 'Proper component ID found');
    $this->assertEqual($component['rid'], $rid, 'Proper release ID found');
    $this->assertEqual($component['name'], $project, 'Proper name found');
    $this->assertEqual($component['title'], ucfirst(str_replace('_', ' ', $project)), 'Proper title found');
    $this->assertTrue($component['description'], 'Description found');
  }
}

/**
 * Ensure that the storage and retrieval API works correctly.
 */
class ProjectInfoAPITestCase extends ProjectInfoTestCase {

  public static function getInfo() {
    return array(
      'name' => 'API',
      'description' => 'Ensure that the storage and retrieval API works correctly.',
      'group' => 'Project info',
    );
  }

  /**
   * Ensure that the storage and retrieval API works correctly.
   */
  protected function testAPI() {
    module_load_include('package.inc', 'project_release');

    // Ensure that default data is provided properly.
    $component_id = 1;
    foreach ($this->releases as $project => $release) {
      $components = project_release_get_components($release->nid);
      $this->assertEqual(count($components), 2, 'Two components found');

      $name = $project;
      foreach ($components as $component) {
        $this->assertComponent($component, $component_id, $release->nid, $name);

        $component = project_release_component_load($component['component_id']);
        $this->assertComponent($component, $component_id++, $release->nid, $name);

        $name .= $project;
      }

      // Ensure that dependencies are provided properly.
      $dependencies = project_release_get_dependencies($release->nid);
      if ($project == 'drupal') {
        $this->assertFalse($dependencies, 'Drupal core has no dependencies');
      }
      else if ($project == 'foo') {
        $this->assertEqual($dependencies[0]['component_id'], 5, 'Foo depends on bar');
        $dependencies = project_release_component_dependencies_load_all(3);
        $this->assertEqual($dependencies[0]['component_id'], 5, 'Foo depends on bar');
      }
      else {
        $this->assertEqual($dependencies[0]['component_id'], 4, 'Bar depends on foo');
        $dependencies = project_release_component_dependencies_load_all(6);
        $this->assertEqual($dependencies[0]['component_id'], 4, 'Bar depends on foo');
      }
    }
  }
}

/**
 * Ensure that the Drupal parsing functions work properly.
 */
class ProjectInfoDrupalTestCase extends ProjectInfoTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Drupal',
      'description' => 'Ensure that the Drupal parsing functions work properly.',
      'group' => 'Project info',
    );
  }

  /**
   * Ensure that the Drupal parsing functions work properly.
   */
  protected function testDrupalParsing() {
    $this->process();

    // Ensure that the components were parsed properly.
    $component_id = 7;
    $components = project_release_get_components($this->releases['foo']->nid);
    $this->assertComponent($components['project_release_info_foo'], $component_id++, $this->releases['foo']->nid, 'project_release_info_foo');

    $components = project_release_get_components($this->releases['bar']->nid);
    $this->assertComponent($components['project_release_info_bar'], $component_id++, $this->releases['bar']->nid, 'project_release_info_bar');
    $this->assertComponent($components['project_release_info_barbar'], $component_id++, $this->releases['bar']->nid, 'project_release_info_barbar');

    debug(project_release_get_components($this->releases['foo']->nid));
    debug(project_release_get_components($this->releases['bar']->nid));

    debug(project_release_component_dependencies_load_all(7));
    debug(project_release_component_dependencies_load_all(8));
    debug(project_release_component_dependencies_load_all(9));

    // Ensure that dependencies were parsed properly.
    debug(project_release_get_dependencies($this->releases['foo']->nid));
    debug(project_release_get_dependencies($this->releases['bar']->nid));

    // Should have error since there is no stable release of project_release_info_foo.
    $this->assertPackageError('ERROR: No development release with a corresponding stable release was ' .
      'found that matches the requirements for dependency [project_release_info_foo] of [project_release_info_bar].');

    $this->createTag('bar', 'DRUPAL-6--1-0');
//    $this->drupalGet('node/add/project-release/' . $this->projects['bar']->nid);

    $this->drupalPost('node/add/project-release/' . $this->projects['bar']->nid, array(), t('Next'));

    $edit = array(
      'body' => $this->randomString(32),
    );
    $this->drupalPost(NULL, $edit, t('Save'));

    $this->process();

    $this->assertNoPackageErrors();
  }

  protected function process() {
    // Remove all previously existing project_release_info data.
    db_query('DELETE FROM {project_release_dependency}');
    db_query('DELETE FROM {project_release_component}');

    // Reset packaging errors.
    wd_err(FALSE, TRUE);

    // Load Drupal specific implementation.
    module_load_include('drupal.inc', 'project_release');

    // Parse test modules related to foo and bar projects.
    $info_files = array(
      drupal_get_path('module', 'project_release_info_foo') . '/project_release_info_foo.info',
    );
    package_release_info_process_all($this->releases['foo']->nid, $info_files, 'foo', '6.x-1.0');

    $info_files = array(
      drupal_get_path('module', 'project_release_info_bar') . '/project_release_info_bar.info',
      drupal_get_path('module', 'project_release_info_barbar') . '/project_release_info_barbar.info',
    );
    package_release_info_process_all($this->releases['bar']->nid, $info_files, 'bar', '6.x-1.2');
  }

  protected function createTag($project, $tag, $branch = FALSE) {
    db_query("INSERT INTO {cvs_tags} VALUES (%d, '%s', %d, %d)", $this->projects[$project]->nid, $tag, $branch ? 1 : 0, time());
  }

  protected function assertPackageError($message) {
    $found = FALSE;
    foreach (wd_err() as $error) {
      if ($error == $message) {
        $found = TRUE;
        break;
      }
    }
    return $this->assertTrue($found, 'Found package error [' . $message . ']');
  }

  protected function assertNoPackageErrors() {
    if (!$this->assertFalse(wd_err(), 'No packaging errors')) {
      foreach (wd_err() as $error) {
        $this->fail($error);
      }
    }
  }
}

function wd_err($message = FALSE, $reset = FALSE) {
  static $messages = array();

  if ($reset) {
    $messages = array();
  }

  if ($message) {
    $messages[] = $message;
  }
  return $messages;
}
